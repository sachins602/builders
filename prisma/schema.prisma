// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    relationMode = "prisma"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade )
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?   // User bio for profile
    isPublic      Boolean   @default(true) // Privacy setting
    
    // Timestamps and soft delete
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime? // Soft delete
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    images        Images[]
    responses     Response[]
    
    // Sharing features
    sharedChains     SharedChain[]
    likes           Like[]
    comments        Comment[]
    sharedToMe      SharedChainUser[] // Chains shared specifically to this user
    
    @@index([email])
    @@index([deletedAt])
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Images {
    id        Int      @id @default(autoincrement())
    name      String
    url       String
    address   String?
    lat       Float?
    lng       Float?
    
    // OSM building data
    osmBuildingId String?     // OSM building ID
    propertyBoundary Json?    // Building boundary geometry
    propertyType String?     // residential, commercial, etc.
    buildingType String?     // house, apartment, office, etc.
    buildingArea Float?      // Building area in square meters
    
    // Timestamps and soft delete
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? // Soft delete

    // Relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    responses   Response[]
    
    @@index([name])
    @@index([createdById])
    @@index([deletedAt])
}

model Response {
    id        Int      @id @default(autoincrement())
    prompt    String   @db.Text
    url       String
    
    // Timestamps and soft delete
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? // Soft delete

    // Relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    
    // Reference to the original image (if this is the first response in a chain)
    sourceImage   Images?   @relation(fields: [sourceImageId], references: [id])
    sourceImageId Int?
    
    // Reference to the previous response (if this is a follow-up response)
    previousResponse   Response?   @relation(name: "ResponseChain", fields: [previousResponseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    previousResponseId Int?
    
    // Responses that were generated from this response
    nextResponses Response[] @relation(name: "ResponseChain")
    
    // Sharing features
    sharedChains SharedChain[]
    likes       Like[]
    comments    Comment[]
    
    @@index([prompt(length: 300)])
    @@index([previousResponseId])
    @@index([sourceImageId])
    @@index([createdById])
    @@index([deletedAt])
}

// Sharing models

model SharedChain {
    id          String    @id @default(cuid())
    title       String    // User-defined title for the shared chain
    description String?   @db.Text // Optional description
    isPublic    Boolean   @default(true) // Public (everyone can see) or private (specific users only)
    
    // The response that starts this shared chain (usually the final result)
    response    Response  @relation(fields: [responseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    responseId  Int
    
    // The user who shared this chain
    sharedBy    User      @relation(fields: [sharedById], references: [id])
    sharedById  String
    
    // Analytics
    viewCount   Int       @default(0)
    likeCount   Int       @default(0)
    commentCount Int      @default(0)
    
    // Timestamps and soft delete
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime? // Soft delete
    
    // Relations
    likes       Like[]
    comments    Comment[]
    sharedToUsers SharedChainUser[] // For private sharing to specific users
    
    @@index([responseId])
    @@index([sharedById])
    @@index([isPublic])
    @@index([deletedAt])
    @@index([createdAt])
}

// For sharing to specific users when isPublic = false
model SharedChainUser {
    id            String      @id @default(cuid())
    
    sharedChain   SharedChain @relation(fields: [sharedChainId], references: [id])
    sharedChainId String
    
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    
    createdAt     DateTime    @default(now())
    
    @@unique([sharedChainId, userId])
    @@index([sharedChainId])
    @@index([userId])
}

model Like {
    id        String   @id @default(cuid())
    
    // What is being liked (either a response or shared chain)
    response    Response? @relation(fields: [responseId], references: [id])
    responseId  Int?
    sharedChain SharedChain? @relation(fields: [sharedChainId], references: [id])
    sharedChainId String?
    
    // Who liked it
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    
    createdAt DateTime @default(now())
    
    @@unique([userId, responseId])
    @@unique([userId, sharedChainId])
    @@index([responseId])
    @@index([sharedChainId])
    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.Text
    
    // What is being commented on (either a response or shared chain)
    response    Response? @relation(fields: [responseId], references: [id])
    responseId  Int?
    sharedChain SharedChain? @relation(fields: [sharedChainId], references: [id])
    sharedChainId String?
    
    // Who commented
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    
    // Timestamps and soft delete
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? // Soft delete
    
    @@index([responseId])
    @@index([sharedChainId])
    @@index([authorId])
    @@index([deletedAt])
    @@index([createdAt])
}