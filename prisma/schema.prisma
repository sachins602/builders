// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    relationMode = "foreignKeys"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enums

enum UserRole {
    USER
    ADMIN
}

enum Visibility {
    PUBLIC
    PRIVATE
}

enum OrganizationMemberRole {
    MEMBER
    ADMIN
    OWNER
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade )
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    role          UserRole  @default(USER)
    image         String?
    bio           String?   // User bio for profile
    isPublic      Boolean   @default(true) // Privacy setting
    
    // Timestamps and soft delete
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime? // Soft delete
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    images        Image[]
    responses     Response[]
    
    // Sharing & interactions
    createdShares       Share[]           @relation(name: "UserCreatedShares")
    shareLikes          ShareLike[]
    shareComments       ShareComment[]
    responseLikes       ResponseLike[]
    responseComments    ResponseComment[]
    receivedShares      ShareRecipient[]  // Shares targeted to this user
    
    // Community Organization relations
    createdOrganizations     Organization[]    @relation(name: "OrganizationCreator")
    organizationMemberships  OrganizationMember[]

    // New back-relation for chains created by this user
    createdChains Chain[] @relation(name: "UserCreatedChains")
    
    @@index([email])
    @@index([deletedAt])
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id        Int      @id @default(autoincrement())
    name      String
    url       String
    address   String?
    lat       Float?
    lng       Float?
    
    // OSM building data
    osmBuildingId String?     // OSM building ID
    propertyBoundary Json?    // Building boundary geometry
    propertyType String?     // residential, commercial, etc.
    buildingType String?     // house, apartment, office, etc.
    buildingArea Float?      // Building area in square meters
    
    // Timestamps and soft delete
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? // Soft delete

    // Relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    // Chains that branch from this image (no direct Response relation)
    chains      Chain[]   @relation(name: "RootImageChains")
    
    @@index([name])
    @@index([createdById])
    @@index([deletedAt])
}

model Chain {
    id           String   @id @default(cuid())

    // The original image this chain starts from (branching at image level)
    rootImage    Image   @relation(name: "RootImageChains", fields: [rootImageId], references: [id])
    rootImageId  Int

    // Who created/started this chain
    createdBy    User    @relation(name: "UserCreatedChains", fields: [createdById], references: [id])
    createdById  String

    // Timestamps and soft delete
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    deletedAt    DateTime?

    // Relations
    responses    Response[]
    shares       Share[]

    @@index([rootImageId])
    @@index([createdById])
    @@index([deletedAt])
}

model Response {
    id        Int      @id @default(autoincrement())
    prompt    String   @db.Text
    url       String
    
    // Timestamps and soft delete
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? // Soft delete

    // Relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    
    // Chain linkage (required) â€” enables linear ordering without recursion
    chain     Chain   @relation(fields: [chainId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    chainId   String
    step      Int

    // Interactions
    responseLikes    ResponseLike[]
    responseComments ResponseComment[]
    
    @@index([prompt(length: 300)])
    @@unique([chainId, step])
    @@index([createdById])
    @@index([deletedAt])
}

// Sharing & interactions (best-version)

model Share {
    id          String     @id @default(cuid())
    title       String
    description String?    @db.Text
    visibility  Visibility @default(PUBLIC)

    chain       Chain      @relation(fields: [chainId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    chainId     String

    sharedBy    User       @relation(name: "UserCreatedShares", fields: [sharedById], references: [id])
    sharedById  String

    // Analytics (optional counters)
    viewCount    Int       @default(0)
    likeCount    Int       @default(0)
    commentCount Int       @default(0)

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?

    recipients  ShareRecipient[]
    likes       ShareLike[]
    comments    ShareComment[]

    @@index([chainId])
    @@index([sharedById])
    @@index([visibility])
    @@index([deletedAt])
    @@index([createdAt])
}

model ShareRecipient {
    id        String @id @default(cuid())
    share     Share  @relation(fields: [shareId], references: [id], onDelete: Cascade)
    shareId   String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())

    @@unique([shareId, userId])
    @@index([shareId])
    @@index([userId])
}

model ResponseLike {
    id         String   @id @default(cuid())
    response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
    responseId Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    createdAt  DateTime @default(now())

    @@unique([userId, responseId])
    @@index([responseId])
    @@index([userId])
}

model ResponseComment {
    id         String   @id @default(cuid())
    response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
    responseId Int
    author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String
    content    String   @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    deletedAt  DateTime?

    @@index([responseId])
    @@index([authorId])
    @@index([deletedAt])
}

model ShareLike {
    id        String @id @default(cuid())
    share     Share  @relation(fields: [shareId], references: [id], onDelete: Cascade)
    shareId   String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())

    @@unique([userId, shareId])
    @@index([shareId])
    @@index([userId])
}

model ShareComment {
    id        String @id @default(cuid())
    share     Share  @relation(fields: [shareId], references: [id], onDelete: Cascade)
    shareId   String
    author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime?

    @@index([shareId])
    @@index([authorId])
    @@index([deletedAt])
}

// Community Organization models
model Organization {
    id          String   @id @default(cuid())
    name        String
    description String   @db.Text // 250 character description
    email       String?
    website     String?
    phone       String?
    avatar      String?  // URL to organization avatar/logo
    
    // Location information
    address     String?
    
    // Timestamps and soft delete
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime? // Soft delete
    
    // Relations
    createdBy   User     @relation(name: "OrganizationCreator", fields: [createdById], references: [id])
    createdById String
    members     OrganizationMember[]
    
    @@index([createdById])
    @@index([deletedAt])
}

model OrganizationMember {
    id             String       @id @default(cuid())
    
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    
    // Member role
    role           OrganizationMemberRole @default(MEMBER)
    
    // Timestamps
    joinedAt       DateTime     @default(now())
    leftAt         DateTime?    // For tracking when someone left
    
    @@unique([organizationId, userId])
    @@index([organizationId])
    @@index([userId])
    @@index([leftAt])
}